#! /bin/sh

show_help()
{
  echo "
  Usage: ./configure [OPTION]...

  OPTIONS:
      -h, --help         display this help and exit
  "
  exit
}

default_config()
{
	PKGNAME="no-name"
	PKGVERSION="1.0"
	PKGSECTION="none"
	PKGAUTHOR="nobody <nobody@nowhere>"
	PKGHOMEAGE="http://"
	PKGDEPENDS=""
	PKGDESCRIPTION="Title
Description"
	SRCPATTERN="*.c *.cc *.c++ *.cxx *.cpp"
	SRCDIR="src"
	OBJDIR="obj"
	DISTROOT=""
	BINFILE="bin/no-name"
	CC="g++"
	CFLAGS="-Wall -O2"
	LD="g++"
	LDFLAGS="-s"
}

load_config()
{
	. $CONFIGSCRIPT
}

check_command()
{
	$@ >/dev/null 2>&1
	if [ $? = 0 ]
	then
		echo "$AF_GREEN ok $AF_RESET"
	else
		echo "$AF_RED failed $AF_RESET"
		return 1
	fi
}

check_env()
{
	tput -V >/dev/null 2>&1
	if [ $? = 0 ]
	then
		AF_RED=$(tput setaf 1)
		AF_GREEN=$(tput setaf 2)
		AF_YELLOW=$(tput setaf 3)
		AF_RESET=$(tput sgr0)
	fi

	#echo -n "  checking ls ... "
	#check_command "ls --version"

	#echo -n "  checking cp ... "
	#check_command "cp --version"

	#echo -n "  checking rm ... "
	#check_command "rm --version"

	#echo -n "  checking mkdir ... "
	#check_command "mkdir --version"

	#echo -n "  checking rmdir ... "
	#check_command "rmdir --version"

	#echo -n "  checking tar ... "
	#check_command "tar --version"

	#echo -n "  checking chmod ... "
	#check_command "chmod --version"

	#echo -n "  checking wc ... "
	#check_command "wc --version"

	echo -n "  checking find ... "
	check_command "find --version"

	echo -n "  checking du ... "
	check_command "du --version"

	echo -n "  checking grep ... "
	check_command "grep --version"

	echo -n "  checking sed ... "
	check_command "sed --version"

	echo -n "  checking printf ... "
	check_command "printf '%s' 'x'"

	echo -n "  checking sort ... "
	check_command "sort --version"

	echo -n "  checking uniq ... "
	check_command "uniq --version"

	#echo -n "  checking uname ... "
	#check_command "uname --version"

	echo -n "  checking make ... "
	check_command "make --version"

	echo -n "  checking gcc ... "
	check_command "gcc --version"

	echo -n "  checking ld ... "
	check_command "ld --version"

	#echo -n "  checking dpkg-deb ... "
	#check_command "dpkg-deb --version"

	#echo -n "  checking update-menus ... "
	#check_command "update-menus --version"

	#echo -n "  checking  update-mime ... "
	#check_command "update-mime --version"
}

check_config()
{
	echo -n "  checking source directory ($SRCDIR) ... "
	if [ -d "$SRCDIR" ]
	then
		echo "$AF_GREEN ok $AF_RESET"
		echo -n "  checking source files ($SRCPATTERN) ... "
		if [ $(find $SRCDIR -type f -name $(echo $SRCPATTERN | sed -e "s| | -or -name |g") | wc -l) != 0 ]
		then
			echo "$AF_GREEN ok $AF_RESET"
		else
			echo "$AF_RED none found $AF_RESET"
			return 1
		fi
	else
		echo "$AF_RED invalid directory $AF_RESET"
		return 1
	fi

	echo -n "  checking object directory ($OBJDIR) ... "
	if [ -d "$OBJDIR" ]
	then
		echo "$AF_GREEN ok $AF_RESET"
	else
		echo "$AF_RED invalid directory $AF_RESET"
		return 1
	fi

	BINPATH=$(echo $BINFILE | sed -e 's|/[^/]*$||g')
	echo -n "  checking binary file path ($BINPATH) ... "
	if [ -d "$BINPATH" ]
	then
		echo "$AF_GREEN ok $AF_RESET"
	else
		echo "$AF_RED invalid path $AF_RESET"
		return 1
	fi

	echo -n "  checking distribution root ($DISTROOT) ... "
	if [ -d "$DISTROOT" ]
	then
		echo "$AF_GREEN ok $AF_RESET"
		echo -n "  checking distribution content ($DISTROOT/*) ... "
		if [ $(ls $DISTROOT | wc -l) != 0 ]
		then
			echo "$AF_GREEN ok $AF_RESET"
		else
			echo "$AF_YELLOW none found $AF_RESET -> $AF_GREEN ignored $AF_RESET"
			DISTROOT=""
		fi
	else
		echo "$AF_YELLOW invalid directory $AF_RESET -> $AF_GREEN ignored $AF_RESET"
		DISTROOT=""
	fi

	echo -n "  checking compiler ($CC) ... "
	check_command "$CC -v"

	echo -n "  checking includes (-I) ... "
	check_command "ls $(echo '$CFLAGS' | grep -o '\-I\S*' | sed -e 's|-I||g')"

	echo -n "  checking linker ($LD) ... "
	check_command "$LD -v"

	echo -n "  checking libraries (-L, -l, /*) ... "
	check_command "ld -lc $(echo '$LDFLAGS' | grep -o '\s\/\S*\|[\-][Ll]\S*') -o /dev/null"
}

write_makefile_header()
{
	echo "# Makefile generated by makebreed" >> makefile
	echo "# http://makebreed.googlecode.com" >> makefile
	echo "" >> makefile
	echo "# Creation Time: '$(date)'" >> makefile
	echo "" >> makefile
	echo "ifeq (\$(BUILD),)" >> makefile
	echo "BUILD=default" >> makefile
	echo "endif" >> makefile
	echo "" >> makefile
}

write_makefile_config_include()
{
	echo "ifeq (\$(BUILD), $(echo $MAKECONF | sed -e 's|make-||g'))" >> makefile
	echo "include $MAKECONF" >> makefile
	echo "endif" >> makefile
	echo "" >> makefile
}

write_makefile_config()
{
	echo "SRCFILES := \$(shell find \$(SRCDIR) -type f -name '' \$(addprefix -or -name , \$(SRCPATTERN)))" >> makefile
	echo "" >> makefile
	echo "OBJFILES := \$(patsubst \$(SRCDIR)/%, \$(OBJDIR)/%.o, \$(SRCFILES))" >> makefile
	echo "" >> makefile
	echo "DISTFILES := \$(patsubst \$(DISTROOT)%, %, \$(shell find \$(DISTROOT) -type f))" >> makefile
	echo "DISTDIRECTORIES := \$(patsubst \$(DISTROOT)%, %, \$(shell find \$(DISTROOT) -type d -empty))" >> makefile
	echo "" >> makefile
	echo "TGZPKG := \$(PKGNAME)_\$(PKGVERSION).tar.gz" >> makefile
	echo "DEBPKG := \$(PKGNAME)_\$(PKGVERSION)_\$(shell dpkg --print-architecture).deb" >> makefile
	echo "" >> makefile
}

write_makefile_rule_build()
{
	echo "all: \$(BINFILE)" >> makefile
	echo "		" >> makefile
	echo "\$(BINFILE): \$(OBJFILES)" >> makefile
	echo "		@echo " >> makefile
	echo "		@\$(shell mkdir -p \$(dir \$@))" >> makefile
	echo "		\$(LD) \$^ \$(LDFLAGS) -o \$@" >> makefile
	echo "" >> makefile
	echo "\$(CURDIR)/\$(OBJDIR)/%.o \$(CURDIR)/\$(SRCDIR)/%.o \$(SRCDIR)/%.o: \$(OBJDIR)/%.o" >> makefile
	echo "		" >> makefile
	echo "\$(OBJDIR)/%.o: \$(SRCDIR)/%" >> makefile
	echo "		@echo " >> makefile
	echo "		@\$(shell mkdir -p \$(dir \$@))" >> makefile
	echo "		\$(CC) \$(CFLAGS) -c \$< -o \$@" >> makefile
	echo "		@gcc \$(CFLAGS) -MM -MT \$@ \$< >> \$(OBJDIR)/\$*.depend" >> makefile
	echo "" >> makefile
	echo "-include \$(OBJFILES:.o=.depend)" >> makefile
	echo "" >> makefile
}

write_makefile_rule_clean()
{
	echo "clean:" >> makefile
	echo "		@find \$(OBJDIR) -type f -delete" >> makefile
	echo "		@rm -f \$(BINFILE)" >> makefile
	echo "" >> makefile
}

write_makefile_rule_dist_installer()
{
	echo "install:" >> makefile
	echo "		@cp -v -r \$(DISTROOT)/* /" >> makefile
	echo "		@update-menus" >> makefile
	echo "" >> makefile
	echo "uninstall:" >> makefile
	echo "		@rm -v -f \$(DISTFILES) 2> /dev/null" >> makefile
	echo "		@rmdir -p --ignore-fail-on-non-empty \$(DISTDIRECTORIES) 2> /dev/null" >> makefile
	echo "		@rmdir -p --ignore-fail-on-non-empty \$(dir \$(DISTFILES)) 2> /dev/null" >> makefile
	echo "		@update-menus" >> makefile
	echo "" >> makefile
}

write_makefile_rule_dist_tgz()
{
	echo "tgz:" >> makefile
	echo "		@tar -v -c -z --exclude='\$(TGZPKG)' --exclude='make*' --exclude='*.deb' --exclude='\$(BINFILE)' --exclude='\$(OBJDIR)/*' -f \$(TGZPKG) *" >> makefile
	echo "" >> makefile
}

write_makefile_rule_dist_deb()
{
	echo "deb: all" >> makefile
	echo "		@mkdir -p \$(DISTROOT)/DEBIAN 2> /dev/null" >> makefile
	echo "		@echo 'Package: $PKGNAME' > \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Version: $PKGVERSION' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Section: $PKGSECTION' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Architecture: $(dpkg --print-architecture)' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Installed-Size: \$(shell du -k -c $DISTROOT | grep 'total' | sed -e 's|\s*total||g')' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Depends: \$(RESOLVE_PKG_DEPS)' | sed -e 's|,\$\$||g' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Maintainer: $PKGAUTHOR' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Priority: extra' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Homepage: $PKGHOMEAGE' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo 'Description: \$(PKGDESCRIPTION)' >> \$(DISTROOT)/DEBIAN/control" >> makefile
	echo "		@echo '#! /bin/sh' > \$(DISTROOT)/DEBIAN/postinst" >> makefile
	echo "		@echo '' >> \$(DISTROOT)/DEBIAN/postinst" >> makefile
	echo "		@echo 'update-menus' >> \$(DISTROOT)/DEBIAN/postinst" >> makefile
	echo "		@echo 'update-mime' >> \$(DISTROOT)/DEBIAN/postinst" >> makefile
	echo "		@chmod 0755 \$(DISTROOT)/DEBIAN/postinst" >> makefile
	echo "		@echo '#! /bin/sh' > \$(DISTROOT)/DEBIAN/postrm" >> makefile
	echo "		@echo '' >> \$(DISTROOT)/DEBIAN/postrm" >> makefile
	echo "		@echo 'update-menus' >> \$(DISTROOT)/DEBIAN/postrm" >> makefile
	echo "		@echo 'update-mime' >> \$(DISTROOT)/DEBIAN/postrm" >> makefile
	echo "		@chmod 0755 \$(DISTROOT)/DEBIAN/postrm" >> makefile
	echo "		@rm -f \$(DEBPKG)" >> makefile
	echo "		@dpkg-deb -v -b \$(DISTROOT) \$(DEBPKG)" >> makefile
	echo "		@rm -f -r \$(DISTROOT)/DEBIAN" >> makefile
	echo "" >> makefile
}

write_makefile_dependency_resolver()
{
	echo "# BEGIN: deb package dependency resolving block" >> makefile
	echo "# {" >> makefile
	echo "    # non-escape patterns" >> makefile
	echo "    PATTERN_01 = s|^Depends: ||g;s|([^)]*)||g;s|,||g;s|  | |g" >> makefile
	echo "    PATTERN_02 = ," >> makefile
	echo "    PATTERN_03 = (" >> makefile
	echo "    PATTERN_04 = )" >> makefile
	echo "    PATTERN_05 = (%)" >> makefile
	echo "    PATTERN_06 = =" >> makefile
	echo "    PATTERN_07 = (>=" >> makefile
	echo "    # generate a list of required packages for the binary file" >> makefile
	echo "    BIN_PKG_DEPS = \$(sort \$(shell dpkg -S \$(filter /%, \$(shell ldd \$(BINFILE) 2> /dev/null)) 2> /dev/null | sed -e 's|:.*||g'))" >> makefile
	echo "    # generate a list of user defined packages for the binary file" >> makefile
	echo "    USER_PKG_DEPS = \$(PKGDEPENDS)" >> makefile
	echo "    # add user defined packages to required packages" >> makefile
	echo "    BIN_USER_PKG_DEPS = \$(sort \$(BIN_PKG_DEPS) \$(USER_PKG_DEPS))" >> makefile
	echo "    # generate a list of all dependencies for each required package (ignore user defined packages)" >> makefile
	echo "    RECURSIVE_PKG_DEPS = \$(sort \$(shell dpkg -s \$(BIN_PKG_DEPS) 2> /dev/null | grep '^Depends:' | sed -e \"\$(PATTERN_01)\"))" >> makefile
	echo "    # remove packages which are already included by other packages (recursive dependencies)" >> makefile
	echo "    DISTINCT_PKG_DEPS = \$(filter-out \$(RECURSIVE_PKG_DEPS),\$(BIN_USER_PKG_DEPS))" >> makefile
	echo "    # append version information for each package available on the system" >> makefile
	echo "    GET_PKG_VERSION = \$(shell dpkg -s \$(PACKAGE) 2> /dev/null | grep '^Version:' | sed -e 's|Version: ||g')" >> makefile
	echo "    RESOLVE_PKG_DEPS = \$(foreach PACKAGE,\$(DISTINCT_PKG_DEPS),\$(if \$(GET_PKG_VERSION),\$(PACKAGE) \$(PATTERN_07)\$(GET_PKG_VERSION)\$(PATTERN_04),\$(PACKAGE))\$(PATTERN_02))" >> makefile
	echo "# }" >> makefile
	echo "# END" >> makefile
	echo "" >> makefile
}

create_makeconf()
{
	echo "PKGNAME = $PKGNAME" >> $MAKECONF
	echo "PKGVERSION = $PKGVERSION" >> $MAKECONF
	echo "PKGSECTION = $PKGSECTION" >> $MAKECONF
	echo "PKGAUTHOR = $PKGAUTHOR" >> $MAKECONF
	echo "PKGHOMEAGE = $PKGHOMEAGE" >> $MAKECONF
	echo "PKGDEPENDS = $(echo $PKGDEPENDS | sed -e 's|([^)]*)||g;s|,||g;s|  | |g')" >> $MAKECONF
	echo "PKGDESCRIPTION = $PKGDESCRIPTION" | sed 's|$|\\n\\|'>> $MAKECONF
	echo " ." >> $MAKECONF
	echo "" >> $MAKECONF
	echo "SRCPATTERN = $SRCPATTERN" >> $MAKECONF
	echo "SRCDIR = $SRCDIR" >> $MAKECONF
	echo "OBJDIR = $OBJDIR" >> $MAKECONF

	if [ "$DISTROOT" ]
	then
		echo "DISTROOT = $DISTROOT" >> $MAKECONF
	else
		echo "DISTROOT = /dev/null" >> $MAKECONF
	fi

	echo "BINFILE = $BINFILE" >> $MAKECONF
	echo "" >> $MAKECONF
	echo "CC = $CC" >> $MAKECONF
	echo "CFLAGS = $(echo $CFLAGS | sed -e 's|[ ]+| |g')" >> $MAKECONF
	echo "LD = $LD" >> $MAKECONF
	echo "LDFLAGS = $(echo $LDFLAGS | sed -e 's|[ ]+| |g')" >> $MAKECONF
}

######################################
### main entry point of the script ###
######################################

# itereate commandline arguments
for ARG in "$@"
do
	case "$ARG" in
		-h)			show_help
					;;
		--help)		show_help
					;;
	esac
done

echo 
echo "Environment:"
check_env
if [ $? = 0 ]
then
	rm -f make-*
	rm -f makefile

	write_makefile_header

	for CONFIGSCRIPT in $(find -type f -name 'config-*')
	do
		echo 
		echo "Configuration Script: $CONFIGSCRIPT"
		default_config
		load_config
		check_config
		if [ $? = 0 ]
		then
			MAKECONF=$(echo $CONFIGSCRIPT | sed -e 's|./config-|make-|g;s|.sh||g')
			create_makeconf
			write_makefile_config_include
		fi
	done

	write_makefile_config
	write_makefile_rule_build
	write_makefile_rule_clean
	write_makefile_rule_dist_installer
	write_makefile_rule_dist_tgz
	write_makefile_rule_dist_deb
	write_makefile_dependency_resolver
fi

echo 
